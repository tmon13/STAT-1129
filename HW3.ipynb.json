{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "f397515a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Andy': 88, 'Amy': 66, 'James': 90, 'Jules': 55, 'Arthur': 77}\n"
     ]
    }
   ],
   "source": [
    "gradebook1 = {'Andy': 88, 'Amy': 66, 'James': 90, 'Jules': 55, 'Arthur': 77}\n",
    "print(gradebook1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "d4ef80a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "88"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gradebook1 = {'Andy': 88, 'Amy': 66, 'James': 90, 'Jules': 55, 'Arthur': 77}\n",
    "def studentgrades(studentname):\n",
    "    for student, grade in gradebook1.items():\n",
    "        if studentname == student:\n",
    "            return(grade)\n",
    "        else:\n",
    "            return(\"cannot find this student\")\n",
    "\n",
    "studentgrades('Andy')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "1d393978",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'cannot find this student'"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "studentgrades('Ethan')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "6bb836fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75.2\n"
     ]
    }
   ],
   "source": [
    "def averagedgrade(gradebook):\n",
    "    print(sum(gradebook.values())/len(gradebook.values()))\n",
    "\n",
    "averagedgrade(gradebook1)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7715b1c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 0\n",
      "1 1\n",
      "2 4\n",
      "3 9\n",
      "4 16\n",
      "5 25\n",
      "6 36\n",
      "7 49\n",
      "8 greater than 8\n"
     ]
    }
   ],
   "source": [
    "def function1(num):\n",
    "    n = 0\n",
    "    while n < num:\n",
    "        print(n, n**2)\n",
    "        n += 1\n",
    "    else:\n",
    "        print(n, \"greater than\", num)\n",
    "        \n",
    "function1(8) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "48e22aa5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45\n"
     ]
    }
   ],
   "source": [
    "def sumfunction(num):\n",
    "    summed = 0\n",
    "    for n in range(num):\n",
    "        summed = summed + n\n",
    "    print(summed)\n",
    "\n",
    "sumfunction(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "aef2e68b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "3\n",
      "6\n",
      "10\n",
      "15\n",
      "21\n",
      "28\n",
      "36\n",
      "45\n"
     ]
    }
   ],
   "source": [
    "def stepsum(num):\n",
    "    summed = 0\n",
    "    for n in range(num):\n",
    "        summed = summed + n\n",
    "        print(summed)\n",
    "\n",
    "stepsum(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "16f18c86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50.5\n",
      "5050\n",
      "28.86607004772212\n"
     ]
    }
   ],
   "source": [
    "nums = list(range(1, 101, 1))\n",
    "def mathfunctions(mathlist):\n",
    "    print(sum(mathlist)/len(mathlist))\n",
    "    print(sum(mathlist))\n",
    "    import statistics\n",
    "    print(statistics.pstdev(mathlist))\n",
    "\n",
    "mathfunctions(nums)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "9a049ea2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def minimal(value1, value2, value3, value4):\n",
    "    min_value = value1\n",
    "    if value2 < value1:\n",
    "        min_value = value2\n",
    "    if value3 < value2:\n",
    "        min_value = value3\n",
    "    if value4 < value3:\n",
    "        min_value = value4\n",
    "    return min_value\n",
    "\n",
    "minimal(15, 28, 4, 71)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "d14bd069",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'basketball worldwide enemy'"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def concat(str1, str2, str3):\n",
    "    return(str1 + \" \" + str2 + \" \" + str3)\n",
    "\n",
    "concat('basketball', 'worldwide', 'enemy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aff3b27d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
